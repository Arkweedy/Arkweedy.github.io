<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ICPC 2023 杭州区域赛</title>
    <url>/2024/11/07/%E9%A2%98%E8%A7%A3/Regional%20Contest/ICPC2023_HangZhou_Regional_Contest/</url>
    <content><![CDATA[<h1 id="gym入口"><a
href="https://codeforces.comu/gym/104976">Gym入口</a></h1>
<h1 id="preface">Preface</h1>
<p>和<a
href="">小木虫</a>一起vp的，赛后补了队友独立写出来的题以及赛时尝试开的两道金牌题。
题解顺序： M-J-D-H-G-F-B</p>
<h1 id="m.-v-diagram"><a
href="https://codeforces.com/gym/104976/problem/M">M. V-Diagram</a></h1>
<p>签到题，题意大概是给定一个V型数组，取一个最大平均值的子V型数组。<br />
赛时WA了两次后才得到了正确思路。<br />
首先，V型数组至少有3个元素，而且要求是子数组，那么可以去掉的只有两端不与极小值直接相邻的部分。<br />
可以考虑贪心，如果我们要去掉一端的一部分，那么去掉那端全部不与极小值相邻的元素一定是最优的。(因为我们去掉一端时，是先去掉大的再去掉小的，那么要去掉一定是全部去掉)<br />
而贪心一个一个去是不可取的，因为可能去掉一个元素会让平均值减小，但是去掉那一整段又可以让平均值变大。<br />
而去掉两端一定是劣的(这样把较大的值全全去掉了)<br />
故答案为不去，去掉左端可以去掉的部分，去掉右端可以去掉的部分三者平均值中取最大值。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    deque&lt;ll&gt;d;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            p = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ll pre = <span class="number">0</span>, suf = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> pcnt = <span class="number">0</span>, scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        pre += a[i];</span><br><span class="line">        pcnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p + <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        suf += a[i];</span><br><span class="line">        scnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> ans = sum / (<span class="type">double</span>)(n);</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, (sum - pre) / (<span class="type">double</span>)(n - pcnt));</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, (sum - suf) / (<span class="type">double</span>)(n - scnt));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.14llf\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="j.-mysterious-tree"><a
href="https://codeforces.com/gym/104976/problem/J">J. Mysterious
Tree</a></h1>
<p>交互题<br />
题意：给一颗树,是链或者是菊花。使用<span
class="math inline">\(\left\lceil\frac{n}{2}\right\rceil +
3\)</span>次询问是否存在一条边<span
class="math inline">\(\{u,v\}\)</span>来确定。<strong>交互是自适应的</strong>。<br />
无论是链还是菊花，都只有<span
class="math inline">\(n-1\)</span>条边，是稀疏图,而问不出一条存在的边，我们便完全无法确定图的类型。所以考虑如何在有限的询问次数中去问出特定类型图的其中一条边。<br />
如果是链，那么是无法通过某种特定的询问序列去问出某条存在的边的。(也就是说，对任何询问序列(询问是不能自适应的，因为问出一条边存在前，得到的都是不存在的返回)，都可以构造出一条链不被问到任意一条边)。<br />
而如果是一颗菊花，我们考虑询问<span
class="math inline">\(\{v_1,v_2\},\{v_3,v_4\}...\)</span>而遍历到每一个顶点。如果这棵树是一颗菊花，那么它存在一个顶点与其他所有顶点之间有边。当询问到这个顶点时，就可以问出一条边。这样一个询问序列，最多消耗<span
class="math inline">\(\left\lceil\frac{n}{2}\right\rceil\)</span>次询问。<br />
问出一条边<span
class="math inline">\(\{u,v\}\)</span>后，我们仍需用剩下3次询问去确定这到底是链还是菊花。如果是菊花，取其他顶点<span
class="math inline">\(w\)</span>,分别询问<span
class="math inline">\(u,v\)</span>是否与<span
class="math inline">\(w\)</span>有边。<br />
1. 均没有边，那么是一条链。<br />
2. 其一有边，不妨设是<span
class="math inline">\(\{u,w\}\)</span>，这时菊花和链还是均有可能。那我们再用最后一次机会询问<span
class="math inline">\(u\)</span>和其他顶点是否有边。<br />
2.1. 如果无边，那么不可能是菊花，是链<br />
2.2. 如果有边，一定是菊花。</p>
<p>code: <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> T,n,res;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> z=<span class="built_in">rnd</span>()%n<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">while</span>(z==x||z==y)</span><br><span class="line">		z=<span class="built_in">rnd</span>()%n<span class="number">+1</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;z&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;res;</span><br><span class="line">	<span class="keyword">if</span>(!res)<span class="built_in">swap</span>(x,y);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;z&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;res;</span><br><span class="line">	<span class="keyword">if</span>(!res)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;! 1&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> o=<span class="built_in">rnd</span>()%n<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">while</span>(o==x||o==y||o==z)</span><br><span class="line">		o=<span class="built_in">rnd</span>()%n<span class="number">+1</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;o&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;res;</span><br><span class="line">	<span class="keyword">if</span>(res)cout&lt;&lt;<span class="string">&quot;! 2&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;! 1&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i<span class="number">+1</span>&lt;&lt;endl;</span><br><span class="line">			cin&gt;&gt;res;</span><br><span class="line">			<span class="keyword">if</span>(res)&#123;</span><br><span class="line">				<span class="built_in">work</span>(i,i<span class="number">+1</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i<span class="number">+1</span>&lt;&lt;endl;</span><br><span class="line">			cin&gt;&gt;res;</span><br><span class="line">			<span class="keyword">if</span>(res)&#123;</span><br><span class="line">				<span class="built_in">work</span>(i,i<span class="number">+1</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">		cin&gt;&gt;res;</span><br><span class="line">		<span class="keyword">if</span>(res)&#123;</span><br><span class="line">			<span class="built_in">work</span>(n,n<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;! 1&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="d.-operator-precedence"><a
href="https://codeforces.com/gym/104976/problem/D">D. Operator
Precedence</a></h1>
<p>妙妙构建题加上智慧的样例<br />
(vp的时候真红温了)<br />
实际上完全不用管样例，为了让乘式的值尽可能小，不妨将中间全部控制为1，只留最后一部分为变量，解二元一次方程(控制解为整数)即可构造出合法序列。<br />
最后构造出的序列是形如<span
class="math inline">\(-1,2,-1,2,...,n-2,1\)</span>的数列。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1 -3 -3 1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1 2 &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;n<span class="number">-2</span>&lt;&lt;<span class="string">&quot; 1 &quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="h.-sugar-sweet-ii"><a
href="https://codeforces.com/gym/104976/problem/H">H. Sugar Sweet
II</a></h1>
<p>节点之间的依赖关系组成一颗外向基环树(或森林)(关于外向树，内向树和基环树可以了解一下)。外向基环树节点的k级祖先是确定的。<br />
对于节点<span class="math inline">\(v\)</span>，如果<span
class="math inline">\(a_v &lt;
b_v\)</span>那么这个节点一定可以获得加成，如果<span
class="math inline">\(a_v &gt;= b_v +
w_v\)</span>,那么一定不能获得加成，如果介于中间，则可否获得加成取决于节点选取的顺序。我们可以先预处理一遍所有节点，把一定可以获得加成的节点概率<span
class="math inline">\(p_v\)</span>设成1，一定不能获得加成的节点概率设成0。这些节点均为已确定的节点。<br />
对于中间状态的节点，我们推导它获得加成的概率。<br />
每个中间节点的状态，取决于其父节点的状态，往前递推，取决于其一系列祖先节点的状态。而想要获得加成，只能是其父节点<span
class="math inline">\(f_1\)</span>已获得加成后，再选择该节点。由数学归纳法，如果其最小的确定状态祖先为k级祖先(存在环上的例外情况)，那么<span
class="math inline">\(f_1,f_2,...f_{k-1}\)</span>都获得加成，该节点才能获得加成。若<span
class="math inline">\(p_{f_k} = 0\)</span>,这些情况都不可能发生，即<span
class="math inline">\(p_{f_0} = p_{f_1} = ... = p_{f_{k-1}} =
0\)</span>。若<span class="math inline">\(p_{f_k} =
1\)</span>,则满足条件的事件发生顺序只有<span
class="math inline">\(\{f_{k-1},f_{k-2},...,f_1,f_0\}\)</span>,由排列数的公式，得到<span
class="math inline">\(p_{f_0} = \frac{1}{A_k^k} =
\frac{1}{k!}\)</span>.此外，有一种特殊情况，即某个圈中没有任何已确定节点，那么由于任何节点被选取后其父节点仍处于加成状态，其概率应为0，从而这个环内所有点概率均为0。<br />
实现上，我们从所有已确定的点处执行一遍dfs，dfs遇到已确定的点就返回，否则按照规则计算该点处的概率。剩下的未访问的点即为特殊情况中的点，将其概率设为0即可。<br />
关于计算k的阶乘倒数的算法，或许我的计算方法有可以优化的地方。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp;g, vector&lt;ll&gt;&amp; p, <span class="type">int</span> s, ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[s] == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : g[s]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j] == <span class="number">-1</span>) &#123;</span><br><span class="line">                p[j] = <span class="built_in">inv</span>(t) % mod * p[s] % mod;</span><br><span class="line">                <span class="built_in">dfs</span>(g, p, j, t + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">a</span>(n + <span class="number">1</span>), <span class="built_in">b</span>(n + <span class="number">1</span>), <span class="built_in">w</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">p</span>(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        g[b[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[b[i]]) &#123;</span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= a[b[i]] + w[b[i]]) &#123;</span><br><span class="line">            p[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(g, p, i, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i] == <span class="number">-1</span>)</span><br><span class="line">            p[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ll ans = (a[i] + (w[i] * p[i] % mod)) % mod;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="g.-snake-move"><a
href="https://codeforces.com/gym/104976/problem/G">G. Snake
Move</a></h1>
<p>贪吃蛇，给出初始的蛇头蛇身位置和地图状态，每步操作可以上/下/左/右移动一格或者缩短蛇身一格。询问到达所有位置的最小步数，以平方和的形式输出。<br />
如果不是蛇身节点，那么最小步数就是蛇头到这个点的操作距离(这可能不等于路径距离)，如果是从蛇尾数起的第k个节点(蛇尾是第一个)，那么最小步数是操作距离和len-k取min.<br />
可以做到<span
class="math inline">\(O(mn)\)</span>，具体实现是使用bfs。使用一个二维数组来模拟队列。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e7</span><span class="number">+4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,k,f[<span class="number">3004</span>][<span class="number">3004</span>];</span><br><span class="line"><span class="type">char</span> c[<span class="number">3004</span>][<span class="number">3004</span>];<span class="type">int</span> v[<span class="number">3004</span>][<span class="number">3004</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">100004</span>],b[<span class="number">100004</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">3004</span>][<span class="number">3004</span>];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;V[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i],&amp;b[i]),v[a[i]][b[i]]=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,c[i]<span class="number">+1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)<span class="keyword">if</span>(c[i][j]==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">			v[i][j]=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(ans));</span><br><span class="line">	ans[a[<span class="number">1</span>]][b[<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line">	V[<span class="number">0</span>].<span class="built_in">emplace_back</span>(a[<span class="number">1</span>],b[<span class="number">1</span>]);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ret=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span>[p,q]:V[i])<span class="keyword">if</span>(ans[p][q]==i)&#123;</span><br><span class="line">			ret+=(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)i*i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">0</span>;d&lt;<span class="number">4</span>;d++)&#123;</span><br><span class="line">				<span class="type">int</span> P=p+dx[d],Q=q+dy[d];</span><br><span class="line">				<span class="keyword">if</span>(!P||!Q||P&gt;n||Q&gt;m||v[P][Q]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="type">int</span> D=i<span class="number">+1</span>;</span><br><span class="line">				<span class="keyword">if</span>(v[P][Q]&gt;<span class="number">0</span>&amp;&amp;k-v[P][Q]&gt;=D)D=k-v[P][Q]<span class="number">+1</span>;</span><br><span class="line">				<span class="keyword">if</span>(D&lt;ans[P][Q])</span><br><span class="line">					ans[P][Q]=D,V[D].<span class="built_in">emplace_back</span>(P,Q);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="f.-top-cluster"><a
href="https://codeforces.com/gym/104976/problem/F">F. Top
Cluster</a></h1>
<p>大概题意：给一个带边权(路径长)和点权的树，保证点权两两不同。多次询问一个节点<span
class="math inline">\(v\)</span>的k-邻域内所有点权集合的mex。需要做到每次询问在<span
class="math inline">\(\log n\)</span>的时间内解决才不会tle。<br />
大概是第一次做这种糅合了一些树上算法知识的题。<br />
需要的算法： Euler序求LCA，二分，树的直径及其性质。</p>
<p>分析：<br />
求出k邻域内的点集显然是<span
class="math inline">\(O(n)\)</span>的，如果我们暴力求解k-邻域内的点，再求解mex显然是不行的。<br />
计算两点间的距离是可以做到<span class="math inline">\(O(n\log
n)\)</span>预处理<span
class="math inline">\(O(1)\)</span>查询的，使用的是通过Euler序将求解LCA转化成求解RMQ。而我们求解某个点<span
class="math inline">\(v\)</span>的k-邻域mex，即是找出一个具有如下性质的边界值<span
class="math inline">\(r\)</span>：<br />
1. 点权小于<span
class="math inline">\(r\)</span>的点均存在，且全部位于<span
class="math inline">\(v\)</span>的k-邻域内。<br />
2. 点权为<span class="math inline">\(r\)</span>的点不存在，或者位于<span
class="math inline">\(v\)</span>的k-邻域外。</p>
<p>接着推进上面所述思路的可行性。<br />
我们可以观察到边界值<span
class="math inline">\(r\)</span>是满足二分答案的条件的：对于小于<span
class="math inline">\(r\)</span>的值均满足第一条性质，大于r的值均不满足第一条性质。所以我们如果能够在<span
class="math inline">\(O(1)\)</span>时间内进行一次判断，就可以使用二分法将单次询问的时间复杂度降到<span
class="math inline">\(O(\log n)\)</span>。<br />
如何判断一个点集内的点是否全在k-邻域内呢？首先，因为使用二分法，我们会按点权排序。所以我们check的点集是固定的，即按点权排序后的前缀和。所以点集我们可以预先处理出来。<br />
判断树上点集是否在范围内，可以转化为求点集内的点到给定点的最大距离。所以我们求解这些点集的直径，而树上任意点到这些点集内的点的最大距离一定等于到直径端点的最大距离。所以我们从check一个点集内的所有点变成判check直径的端点。求解前缀和集合的直径可以<span
class="math inline">\(O(n)\)</span>解决。<br />
于是，我们得出了这个<span class="math inline">\(O(n\log
n)\)</span>的解法。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;w;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;idx;</span><br><span class="line">vector&lt;vector&lt;pair&lt;<span class="type">int</span>, ll&gt;&gt;&gt;g;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;dfn;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;dval;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;elr;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;eidx;</span><br><span class="line">vector&lt;ll&gt;dis;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;lca;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;dia;</span><br><span class="line"><span class="type">int</span> dfncnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_elr</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dfn[r] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        dfn[r] = dfncnt++;</span><br><span class="line">        dval[dfn[r]] = r;</span><br><span class="line">        elr.<span class="built_in">push_back</span>(dfn[r]);</span><br><span class="line">        eidx[r] = elr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [p, d] : g[r]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p != fa) &#123;</span><br><span class="line">                dis[p] = dis[r] + d;</span><br><span class="line">                <span class="built_in">get_elr</span>(p, r);</span><br><span class="line">                elr.<span class="built_in">push_back</span>(dfn[r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> iu = eidx[u], iv = eidx[v];</span><br><span class="line">    <span class="keyword">if</span> (iu &gt; iv)</span><br><span class="line">        <span class="built_in">swap</span>(iu, iv);</span><br><span class="line">    <span class="type">int</span> len = iv - iu + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">floor</span>(<span class="built_in">log2</span>(len));</span><br><span class="line">    <span class="type">int</span> index = <span class="built_in">min</span>(lca[iu][k], lca[iv - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    <span class="keyword">return</span> dval[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dist</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[u] + dis[v] - <span class="number">2</span> * dis[<span class="built_in">Lca</span>(u, v)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; a, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp;other)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;res = other;</span><br><span class="line">    ll len = <span class="built_in">dist</span>(other.first, other.second);</span><br><span class="line">    ll len1 = <span class="built_in">dist</span>(a.first, other.first), len2 = <span class="built_in">dist</span>(a.first, other.second);</span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len) &#123;</span><br><span class="line">        res = &#123; a.first,other.first &#125;;</span><br><span class="line">        len = len1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len2 &gt; len) &#123;</span><br><span class="line">        res = &#123; a.first,other.second &#125;;</span><br><span class="line">        len = len2;</span><br><span class="line">    &#125;</span><br><span class="line">    a = res;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">floor</span>(<span class="built_in">log2</span>(n * <span class="number">2</span> - <span class="number">1</span>));</span><br><span class="line">    w.<span class="built_in">resize</span>(n);</span><br><span class="line">    dfn.<span class="built_in">resize</span>(n);</span><br><span class="line">    dval.<span class="built_in">resize</span>(n<span class="number">+1</span>);</span><br><span class="line">    eidx.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="comment">//elr.resize(n * 2 + 1);</span></span><br><span class="line">    g.<span class="built_in">resize</span>(n);</span><br><span class="line">    dis.<span class="built_in">resize</span>(n);</span><br><span class="line">    lca.<span class="built_in">resize</span>(n * <span class="number">2</span> - <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(len + <span class="number">1</span>, inf));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; w[i];</span><br><span class="line">        idx[w[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//auto a = w;</span></span><br><span class="line">    <span class="built_in">sort</span>(w.<span class="built_in">begin</span>(), w.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, d;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; d;</span><br><span class="line">        u--;</span><br><span class="line">        v--;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(&#123; v,d &#125;);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(&#123; u,d &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">get_elr</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> elrlen = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; elrlen; i++) &#123;</span><br><span class="line">        lca[i][<span class="number">0</span>] = elr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt; elrlen; j++) &#123;</span><br><span class="line">            lca[j][i] = <span class="built_in">min</span>(lca[j][i - <span class="number">1</span>], lca[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sort as w</span></span><br><span class="line">    dia.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dia[i] = &#123; idx[w[i]],idx[w[i]] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">merge</span>(dia[i], dia[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rlim = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (w[i] != i) &#123;</span><br><span class="line">            rlim = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        ll x, k;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; k;</span><br><span class="line">        x--;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">-1</span>, r = rlim;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> midi = <span class="built_in">lower_bound</span>(w.<span class="built_in">begin</span>(), w.<span class="built_in">end</span>(), mid) - w.<span class="built_in">begin</span>();</span><br><span class="line">            ll d = <span class="built_in">max</span>(<span class="built_in">dist</span>(x, dia[midi].first), <span class="built_in">dist</span>(x, dia[midi].second));</span><br><span class="line">            <span class="keyword">if</span> (d &lt;= k) &#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="b.-festival-decorating"><a
href="https://codeforces.com/gym/104976/problem/B">B. Festival
Decorating</a></h1>
<p>这题有着蜜汁check，考虑误差范围好像可以用多项式科技解决(但是我不会QWQ)。不过学习了这题利用bitset精确求解的解法。bitset,太强大！<br />
由于答案的优先级是下标(并非位置)较小的优先，我们可以按下标顺序枚举该点可以贡献的答案，已有答案的距离不再枚举。可行的枚举位置需要两步操作得出：<br />
1. 去除同颜色的灯<br />
2. 去除已获得答案的距离对应位置的灯</p>
<p>剩余有灯的位置均为可贡献答案的位置。<br />
这显然是一个<span
class="math inline">\(O(n^2)\)</span>的做法，其中我们枚举出来可以贡献答案的位置以及记录答案操作有<span
class="math inline">\(n\)</span>的数量级，但是找到这些位置的操作数
是<span
class="math inline">\(n^2\)</span>级别的。这时我们就可以利用我们的bitset,降低没有关联其他操作的常数，达到<span
class="math inline">\(O(\frac{n^2}{\omega})\)</span>的时间复杂度。<br />
具体做法：<br />
我们用一个二维vector存不同颜色的点，用bitset <span
class="math inline">\(mp\)</span>存数轴的状态(有灯为1，无灯为0),并且再用一个bitset
<span
class="math inline">\(getans\)</span>存以及获得了答案的距离的状态(未获得答案为0).<br />
对于操作1，这是关联了遍历某个特定颜色点集的操作，bitset无法降低时间复杂度。但是我们可以使用Big
Small(根号分治)来降低时间复杂度。对于出现次数大于<span
class="math inline">\(\sqrt
N\)</span>的颜色，我们预处理出初始序列取出掉这些点得到的序列，时间复杂度为<span
class="math inline">\(O(N)\)</span>，但是这种操作不会大于<span
class="math inline">\(\sqrt N\)</span>次。对于出现次数小于<span
class="math inline">\(\sqrt
N\)</span>的颜色，我们每次遇到时再执行操作1即可，每次执行的时间复杂度不超过<span
class="math inline">\(O(\sqrt N)\)</span>,最多操作<span
class="math inline">\(n\)</span>次。通过根号分治，我们将操作1的总时间复杂度降到<span
class="math inline">\(O(n\sqrt N)\)</span>级别。<br />
对于操作2，这是只使用了bitset的操作，时间复杂度被bitset优化。我们获取目前考虑的点的位置<span
class="math inline">\(x\)</span>，可枚举的位置用bitset表示即为<span
class="math inline">\(mp &gt;&gt;x \&amp; \sim
getans\)</span>。这部分的时间复杂度为<span
class="math inline">\(O(\frac{n^2}{\omega})\)</span><br />
做完预处理操作后，遍历bitset，找到为1的位置填入答案即可。G++里bitset有_Find_first()和pos._Find_next(p)函数，比较好写。为什么MSVC没有这些函数
:(<br />
把对应两种操作的算法组合起来，即可得到使用bitset的正解。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">250001</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> sq = <span class="built_in">sqrt</span>(N);</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">cl</span>(n);</span><br><span class="line">    <span class="comment">//vector&lt;int&gt;mp(N);</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">ans</span>(N);</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">g</span>(N);</span><br><span class="line">    bitset&lt;N&gt;s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, c;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">        a[i] = x;</span><br><span class="line">        cl[i] = c;</span><br><span class="line">        <span class="comment">//mp[x] = c;</span></span><br><span class="line">        s[x] = <span class="literal">true</span>;</span><br><span class="line">        g[c].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;bitset&lt;N&gt;&gt;msk;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">idx</span>(N,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(g[i].<span class="built_in">size</span>() &gt;= sq)&#123;</span><br><span class="line">            bitset&lt;N&gt;st;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j:g[i])</span><br><span class="line">                st.<span class="built_in">set</span>(j);</span><br><span class="line">            idx[i] = msk.<span class="built_in">size</span>();</span><br><span class="line">            msk.<span class="built_in">push_back</span>(s&amp;(~st));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;N&gt;getans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        bitset&lt;N&gt;pos;</span><br><span class="line">        <span class="keyword">if</span>(idx[cl[i]] == <span class="number">-1</span>)&#123;</span><br><span class="line">            pos = s;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j:g[cl[i]])</span><br><span class="line">                pos[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pos = msk[idx[cl[i]]];</span><br><span class="line">        &#125;</span><br><span class="line">        pos &gt;&gt;= a[i];</span><br><span class="line">        pos &amp;= ~getans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p = pos._Find_first();p != pos.<span class="built_in">size</span>();p = pos._Find_next(p) )&#123;</span><br><span class="line">            ans[p] = i + <span class="number">1</span>;</span><br><span class="line">            getans.<span class="built_in">set</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> d;</span><br><span class="line">        cin&gt;&gt;d;</span><br><span class="line">        cout&lt;&lt;ans[d]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>(ps: 难产了两周的补题题解终于生出来了)</p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Regional Contest</category>
      </categories>
  </entry>
  <entry>
    <title>CF Round974 div3</title>
    <url>/2024/10/21/%E9%A2%98%E8%A7%A3/Codeforces/Contest/cf_round974_div3/</url>
    <content><![CDATA[<h1 id="d-robert-hood-and-mrs-hood"><a
href="https://codeforces.com/contest/2014/problem/D">D Robert Hood and
Mrs Hood</a></h1>
<p>赛时对l,r分别进行了排序,来测算是否有事件进入，实际上这是没有必要的。</p>
<p>可以直接用一个桶来记录。buc[l]--,buc[r+1]--即可。</p>
<p>不难，时间复杂度为<span class="math inline">\(O(n)\)</span></p>
<h1 id="e---rendez-vous-de-marian-et-robin"><a
href="https://codeforces.com/contest/2014/problem/E">E - Rendez-vous de
Marian et Robin</a></h1>
<p>赛时魔改dijkstra没有改出来(实际上应该也很难改出来)
赛后了解到分层图，直接开悟
做法是对每个节点，建图建一个有马节点，一个无马节点，有horse的节点就让无马节点向有马节点连边。对于给出的边，有马图和无马图同步建图。最后跑一遍Dijkstra就行。</p>
<h1 id="f---sheriffs-defense"><a
href="https://codeforces.com/contest/2014/problem/F">F - Sheriff's
Defense</a></h1>
<p>由于给出的是树形结构，可以当作一颗有根树。
和图最大的不同点是这样的树上问题可以做到无后效性(考虑树上dfs，不会有背向边或者横叉边)，换言之就是可以dp/dfs
(虽然我一开始想试试贪心，但是最后也没有试出来，而且时间复杂度上是不如dp的，实现上也比dp难，所以说dp好啊)
由于一个节点有两种状态，每个节点的贡献仅由这个节点和相邻节点决定。
于是我们考虑有根树上的状态转移： 两个相邻节点都取的话，总贡献减去<span
class="math inline">\(2c\)</span> 取<span
class="math inline">\(S_u\)</span>为<span
class="math inline">\(u\)</span>节点的子节点集合，<span
class="math inline">\(dp[u]\)</span>为子树的贡献</p>
<p><span class="math inline">\(dp[u][0] = \sum_{v\in S_u}
\max(dp[v][0],dp[v][1])\)</span> <span class="math inline">\(dp[u][1] =
\sum_{v\in S_u} \max(dp[v][0],dp[v][1]-2c)\)</span></p>
<p>实现用dfs实现即可。</p>
<p>核心代码： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dp1用a[i]初始化</span></span><br><span class="line"><span class="built_in">dfs</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g[p].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[p][i] != fa) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(g, a, dp0, dp1, g[p][i], p, c);</span><br><span class="line">            dp0[p] += <span class="built_in">max</span>(dp0[g[p][i]], dp1[g[p][i]]);</span><br><span class="line">            dp1[p] += <span class="built_in">max</span>(dp0[g[p][i]], dp1[g[p][i]] - c * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>Contest</category>
      </categories>
  </entry>
  <entry>
    <title>CF Round 972 div2</title>
    <url>/2024/10/21/%E9%A2%98%E8%A7%A3/Codeforces/Contest/cf_round972_div2/</url>
    <content><![CDATA[<h1 id="c.-lazy-narek"><a
href="https://codeforces.com/contest/2005/problem/C">C. Lazy
Narek</a></h1>
<p>dp即可； <strong>不过一定要好好读题才行！！</strong>
就是读题读假了和不仔细，才导致vp赛时没有调出来。
这个dp的优化(或者是自然而然的处理)：数组开1维5个位置即可，不需要对m轮全部开一个位置，否则会tle。状态转移时记得滚动，不要在原数组上面改，否则会出问题(可能跑出来同一层选了两次的结果)</p>
<h1 id="d.-alter-the-gcd"><a
href="https://codeforces.com/contest/2005/problem/D">D. Alter the
GCD</a></h1>
<h2 id="analysis">analysis</h2>
<p>前缀和后缀和gcd自然不用多说。逐一枚举<span
class="math inline">\(\{l，r\}\)</span>即使每次枚举求值是<span
class="math inline">\(O(1)\)</span>也会tle。所以要寻求更好的方法求解。</p>
<p>由于一个数的质因子最多只有<span class="math inline">\(\log
n\)</span>个，考虑gcd prefix是单调非升的，那么有如下性质： 只有最多<span
class="math inline">\(\log n\)</span>个位置 <span
class="math inline">\(i\)</span> 使 $ prefix[i] &gt; prefix[i+1] $
,其余均为 <span class="math inline">\(prefix[i] = prefix[i+1]\)</span>
对suffix gcd类似。 那么实际上，绝大多数前后缀gcd是相等的。 如果枚举<span
class="math inline">\(\{l，r\}\)</span>是对于<span
class="math inline">\(l\)</span>或<span
class="math inline">\(r\)</span>都是<span
class="math inline">\(O(n)\)</span>，组合起来是<span
class="math inline">\(O(n^2)\)</span>的的话，我们枚举单个变量的前缀/后缀值可以把这个枚举降到一个<span
class="math inline">\(O(\log n)\)</span>的时间复杂度
基于这样的观察，我们有不同的思路求解：</p>
<h2 id="solve1-分治">solve1 分治</h2>
<p>我们枚举l，r代表的前后缀值的话，那么中间这部分怎么加进来呢?如何防止l&gt;r呢
(毕竟不同的值都转化成了gcd value) 我们考虑设定一个枚举范围 $ [l,r],mid =
(l+r)/2 $ ,枚举所有的<span class="math inline">\(l \le i \le
mid\)</span>和<span class="math inline">\((mid +1) \le j \le r\)</span>
这个时候所有跨 <span class="math inline">\(mid\)</span> 和 <span
class="math inline">\(mid+1\)</span>
间隙的值都被遍历到了，只剩两个子区间内部的没有被枚举。
于是我们递归地取求解 <span class="math inline">\([l,mid]\)</span> 和
<span class="math inline">\([mid+1,r]\)</span> ，而对于 <span
class="math inline">\(l = r\)</span> 的区间我们特别枚举答案 <span
class="math inline">\(\{l,r\}\)</span> (因为按照前面的规则的话 <span
class="math inline">\([l,r]\)</span>
是没有贡献对的，这样会漏，但是如果我们扩大 <span
class="math inline">\([l,r]\)</span>
的贡献对范围的话，导致重复贡献将难以处理。)
通过这样的递归，或者说是分治策略，我们按值枚举不重不漏地遍历了所有组合</p>
<p>那么如何通过<strong>按值枚举</strong>快速求出一个枚举范围 <span
class="math inline">\([l,r]\)</span> 所有的 <span
class="math inline">\(value(\{i,j\})\)</span> 呢
根据前面的分治策略，我们把三段gcd的复合转化成以mid为界的两段gcd的复合：(以数组a最终的gcd为例)
<span class="math display">\[p[i] =
\gcd(a_l,a_{l+1},...,a_{i-1},b_i,b_{i+1},...,b_{mid})\]</span> <span
class="math display">\[s[j] =
\gcd(b_{mid+1},b_{mid+2},...b_{j},a_{j+1},...,a_{r})\]</span> 由于对
<span class="math inline">\(a,b\)</span> 均要求出 <span
class="math inline">\(p[i] , s[j]\)</span> ,
我们用map&lt;pair&lt;int,int&gt;&gt;<span
class="math inline">\(pmp,smp\)</span>( <span
class="math inline">\(a,b\)</span> 相同位置的 <span
class="math inline">\(p[i],s[j]\)</span>
成一组存储，作为相异的键，值则为其数量)存储这样的 <span
class="math inline">\(p[i]\)</span> 的值和 <span
class="math inline">\(s[j]\)</span> 的值。
再利用一点点前缀和后缀和，我们便可以用<span
class="math inline">\(O(n)\)</span>的时间<strong>分别</strong>遍历<span
class="math inline">\(i,j\)</span>的所有取值 随后我们用两层循环遍历<span
class="math inline">\(pmp,smp\)</span>，将所有值的组合纳入答案
由前面的观察，这个部分的时间复杂度是<span
class="math inline">\(O(\log^2n)\)</span>
那么，我们处理每个区间的时间复杂度为： <span
class="math inline">\(O(n+\log^2n) = O(n)\)</span>
这是一个分治算法，那么整体复杂度为 <span class="math inline">\(O(n\log
n)\)</span>，足以通过本题。</p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>Contest</category>
      </categories>
  </entry>
  <entry>
    <title>CF Round981 div3</title>
    <url>/2024/10/25/%E9%A2%98%E8%A7%A3/Codeforces/Contest/cf_round981_div3/</url>
    <content><![CDATA[<h2 id="比赛入口"><a
href="https://codeforces.com/contest/2033">比赛入口</a></h2>
<h1 id="c"><a
href="https://codeforces.com/contest/2033/problem/C">C</a></h1>
<p>为了无后效性，我们对每一对可交换的数对，只计算交换对外层的影响(干扰度是否会减少)。而交换是相对的，所以对该层外层的操作与否也不会影响该层内层是否相对该层进行交换
<strong>(也就是说我们不需要真的去交换，只计数即可)</strong>。
所以做法即为贪心，我们如果发现交换可以使该层对外层的干扰数减少，那就使ans减去这个差值。任意次序遍历数组(比如说由外到内)均可，毕竟层与层之间没有影响。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n + <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i - <span class="number">1</span>])</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">k</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> div = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i - <span class="number">1</span>])</span><br><span class="line">            div++;</span><br><span class="line">        <span class="keyword">if</span> (a[n - i + <span class="number">1</span>] == a[n - i + <span class="number">2</span>])</span><br><span class="line">            div++;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[n - i + <span class="number">2</span>])</span><br><span class="line">            div--;</span><br><span class="line">        <span class="keyword">if</span> (a[n - i + <span class="number">1</span>] == a[i - <span class="number">1</span>])</span><br><span class="line">            div--;</span><br><span class="line">        sum -= <span class="built_in">max</span>(<span class="number">0</span>, div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="d"><a
href="https://codeforces.com/contest/2033/problem/D">D</a></h1>
<p>我的做法是前缀和+线性dp
当前缀和在i，j两处相等时，说明[i+1,j]这一段的和为0。
我们用map记录每个前缀和点值出现的位置，若前面已出现，我们就将这一段纳入答案中。
用线性dp计算答案。 设状态<span
class="math inline">\(dp[i]\)</span>为在<span
class="math inline">\([1,i]\)</span>段的答案，那么如果<span
class="math inline">\(i\)</span>是某一段美丽线段<span
class="math inline">\([pre + 1,i]\)</span>的右端点(记<span
class="math inline">\(pre\)</span>为上一个相同的presum点值下标)，那么它可以是<span
class="math inline">\(pre\)</span>处的答案再加上1，或者等于<span
class="math inline">\(i-1\)</span>处的答案。 若<span
class="math inline">\(pre\)</span>存在，状态转移方程： <span
class="math display">\[dp[i+1] = \max(dp[i],dp[pre]+1)\]</span>
时间复杂度为<span class="math inline">\(O(n)\)</span><br />
此外，需要注意的是，不能漏掉下标为0处的presum(这代表着从1开始的美丽线段)，而map的初始化值为0，所以我们判断presum是否在前面出现过，需要对presum为0的情况特殊处理一下。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">a</span>(n + <span class="number">1</span>);</span><br><span class="line">    map&lt;ll, ll&gt;mp;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">dp</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (mp[a[i]] != <span class="number">0</span> || a[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            dp[i] = dp[mp[a[i]]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        mp[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = dp[n];</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="e"><a
href="https://codeforces.com/contest/2033/problem/E">E</a></h1>
<p>感觉是比较典的题，类似的有：<a
href="https://ac.nowcoder.com/acm/contest/81599/C">牛客多校2024第4场
Sort4</a></p>
<p>首先我们明确一个<span class="math inline">\(1 -n\)</span>的排列<span
class="math inline">\(p\)</span>，由<span
class="math inline">\(i\)</span>向<span
class="math inline">\(p[i]\)</span>连边构成的有向图的结构：<br />
1. 这个图只由若干个不相交的环构成(自环也算环)<br />
2. 图中不存在链或者指向环的链(原因：<span
class="math inline">\(p[i]\)</span>的值不同)</p>
<p>再看题意，实际上就是需要我们通过若干次交换操作使这个图只由大小为1或者2的环组成。
我们观察swap操作,可以发现(这里推荐仔细思考一下)：<br />
1. swap不同环上的点，将两个环合并成一个环。<br />
2. swap相同环上的点，将一个环分裂成两个环。(可以想想是怎么分裂的)</p>
<p>所以最优操作即为：对每个点数<span class="math inline">\(n &gt;
2\)</span>的环，我们都不断地分裂出点数为2的环直到符合题意为止，操作数<span
class="math inline">\(k = \left \lfloor\frac{n-1}{2}
\right\rfloor\)</span></p>
<p>时间复杂度为<span class="math inline">\(O(n)\)</span><br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; vs, <span class="type">int</span> p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vs[p])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        vs[p] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(a, vs, a[p]) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">vs</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">dfs</span>(a,vs, i);</span><br><span class="line">        ans += (t - <span class="number">1</span>) / <span class="number">2</span>;k</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="f"><a
href="https://codeforces.com/contest/2033/problem/F">F</a></h1>
<p>找规律题。具体证明实际上没有太懂。<br />
打表可以发现n-th <span class="math inline">\(g(k) =
n*g(k)\)</span><br />
又由于k的总和不会很大，<span
class="math inline">\(g(k)\)</span>的上界不好估计， 但是常数<span
class="math inline">\(t
=\max(g(k)/k)\)</span>应该不会过于大。所以对于每次询问，直接暴力解出第一个模<span
class="math inline">\(k\)</span>为0的位置，乘n即可 时间复杂度<span
class="math inline">\(O(t\cdot \sum k)\)</span><br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    ll f1 = <span class="number">1</span>, f2 = <span class="number">1</span>;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; n % mod &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (f2 % k == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; (n % mod) * (cnt + <span class="number">2</span>) % mod &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="type">int</span> f = (f1 + f2) % k;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="g"><a
href="https://codeforces.com/contest/2033/problem/G">G</a></h1>
<p>树上问题，翻译一下题意，就是在一颗有根树上，多次询问一个节点v的k级祖先的子树上，距离v最远的节点的距离。</p>
<p>首先，求k级祖先，可以倍增法预处理(后面求lca也要用到这里的倍增)，<span
class="math inline">\(O(\log k)\)</span>查询。
那么，怎么求这颗子树上距离v最远的点的距离呢?</p>
<blockquote>
<p>引理1： 在一棵树上，从任意节点 y 开始进行一次
DFS，到达的距离其最远的节点 z 必为直径的一端</p>
</blockquote>
<p>那么就是说，树上任意点的距离最远点只能是树的直径端点。<br />
所以我们把问题转化成求所有子树的直径问题。而一个树的直径可以由它的子树的直径信息合并而来。</p>
<blockquote>
<p>引理2： 记<span class="math inline">\(diam(S)\)</span>为树上点集<span
class="math inline">\(S\)</span>的最远点对，有： <span
class="math display">\[ \rm{diam}(S_1\cup S_2) =
\rm{diam}(\rm{diam}(S_1) \cup \rm{diam}(S_2))\]</span></p>
</blockquote>
<p>于是我们遍历子树直径和该树直径的点集和的所有点对组合，找出最大路径长的点对，即为该树的直径。通过dfs自底向上合并即可。
其中求点对之间的路径长，我们使用公式 <span
class="math display">\[pathlen(u,v) = deep(u)+deep(v) -
2deep(\rm{lca}(u,v))\]</span>即可
求lca则利用前面预处理的倍增信息来求。<br />
时间复杂度：<span class="math inline">\(O(n)\)</span></p>
<p>code： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;g;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;fa;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;dep;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;dia;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[p][<span class="number">0</span>] = f;</span><br><span class="line">    dep[p] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : g[p]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s != f) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(s, p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> div = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; div != <span class="number">0</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (div &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            u = fa[u][i];</span><br><span class="line">            div -= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">19</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[u][j] != fa[v][j]) &#123;</span><br><span class="line">                u = fa[u][j];</span><br><span class="line">                v = fa[v][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pathlen</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep[u] + dep[v] - <span class="number">2</span> * dep[<span class="built_in">lca</span>(u, v)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp;p, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;res;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pathlen</span>(p.first, p.second) &gt;= <span class="built_in">pathlen</span>(s.first, s.second)) &#123;</span><br><span class="line">        res = p;</span><br><span class="line">        len = <span class="built_in">pathlen</span>(p.first, p.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res = s;</span><br><span class="line">        len = <span class="built_in">pathlen</span>(s.first, s.second);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pathlen</span>(p.first, s.first) &gt; len) &#123;</span><br><span class="line">        res = &#123; p.first,s.first &#125;;</span><br><span class="line">        len = <span class="built_in">pathlen</span>(p.first, s.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pathlen</span>(p.first, s.second) &gt; len) &#123;</span><br><span class="line">        res = &#123; p.first,s.second &#125;;</span><br><span class="line">        len = <span class="built_in">pathlen</span>(p.first, s.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pathlen</span>(p.second, s.first) &gt; len) &#123;</span><br><span class="line">        res = &#123; p.second,s.first &#125;;</span><br><span class="line">        len = <span class="built_in">pathlen</span>(p.second, s.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pathlen</span>(p.second, s.second) &gt; len) &#123;</span><br><span class="line">        res = &#123; p.second,s.second &#125;;</span><br><span class="line">        len = <span class="built_in">pathlen</span>(p.second, s.second);</span><br><span class="line">    &#125;</span><br><span class="line">    p = res;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : g[p]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s != f) &#123;</span><br><span class="line">            <span class="built_in">dfs2</span>(s, p);</span><br><span class="line">            <span class="built_in">merge</span>(dia[p], dia[s]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    g.<span class="built_in">clear</span>();</span><br><span class="line">    fa.<span class="built_in">clear</span>();</span><br><span class="line">    dep.<span class="built_in">clear</span>();</span><br><span class="line">    dia.<span class="built_in">clear</span>();</span><br><span class="line">    g.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>));</span><br><span class="line">    fa.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">30</span>));</span><br><span class="line">    dep.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dia.<span class="built_in">resize</span>(n + <span class="number">1</span>, &#123; <span class="number">0</span>,<span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            fa[j][i] = fa[fa[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dia[i] = &#123; i,i &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> u, k;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; k;</span><br><span class="line">        <span class="type">int</span> v = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; k != <span class="number">0</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                u = fa[u][i];</span><br><span class="line">                k -= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">max</span>(<span class="built_in">pathlen</span>(v, dia[u].first), <span class="built_in">pathlen</span>(v, dia[u].second));</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><em>ps:因为直径是<strong>dia</strong>meter,所以封面就用Dia了</em></p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>Contest</category>
      </categories>
  </entry>
  <entry>
    <title>CF Round982 div2</title>
    <url>/2024/11/02/%E9%A2%98%E8%A7%A3/Codeforces/Contest/cf_round982_div2/</url>
    <content><![CDATA[<h2 id="比赛入口"><a
href="https://codeforces.com/contest/2027">比赛入口</a></h2>
<h1 id="c"><a
href="https://codeforces.com/contest/2027/problem/C">C</a></h1>
<p>很简单，建图找一下最远点即可。<br />
不过因为点值比较离散，所以用map存邻接表(cf传统艺能卡ump，所以还是不用的好)。<br />
code:<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(map&lt;ll, vector&lt;ll&gt;&gt;&amp; nxt, map&lt;ll, <span class="type">bool</span>&gt;&amp; vs, ll p, ll &amp;ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vs[p] = <span class="literal">true</span>;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : nxt[p]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vs[s] &amp;&amp; s != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(nxt, vs, s,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">a</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;ll, vector&lt;ll&gt;&gt;nxt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        nxt[a[i] + i <span class="number">-1</span>].<span class="built_in">push_back</span>(a[i] + i * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;ll,<span class="type">bool</span>&gt;vs;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(nxt, vs, n, ans);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="d"><a
href="https://codeforces.com/contest/2027/problem/D2">D</a></h1>
<p>D1需要求解最少cost,D2还要求解最少cost的方案数。</p>
<h2 id="d1部分">D1部分</h2>
<p>首先分析题意，可以发现这是一个类似完全背包的问题。
所以我们可以背包dp解决。<br />
设定状态<span class="math inline">\(dp[i]\)</span>为取完<span
class="math inline">\(a_1 ... a_i\)</span>的最小费用。显然<span
class="math inline">\(dp\)</span>数组是单调非降的。对于每个下标<span
class="math inline">\(r\)</span>,设<span
class="math inline">\(l\)</span>是满足<span
class="math inline">\(\sum_{k=l}^{r} a[k] \leq
b[i]\)</span>的最小值，那么从<span
class="math inline">\(l-1\)</span>转移到<span
class="math inline">\(r\)</span>一定是最优的。于是有状态转移方程：<br />
<span class="math display">\[dp[r] = \min(dp[r],dp[l-1] +
m-i)\]</span><br />
于是问题转移到如何对于每一个<span
class="math inline">\(r\)</span>，在可以容忍的时间限下求出<span
class="math inline">\(l\)</span>。<br />
对此，我们可以使用双指针。想象一个队列,队尾为<span
class="math inline">\(l\)</span>，待加入元素为<span
class="math inline">\(a[r]\)</span><br />
1. 当剩余容积<span class="math inline">\(rem\)</span>大于等于物品<span
class="math inline">\(a[r]\)</span>的cost时，加入<span
class="math inline">\(a[r]\)</span>,此时的<span
class="math inline">\(\{l,r\}\)</span>即为一组合法的转移参数，于是执行转移。<br />
2. 当剩余容积<span class="math inline">\(rem\)</span>小于物品<span
class="math inline">\(a[r]\)</span>的cost时，我们弹出队尾元素，更新剩余容积。<br />
3. 特殊情况，当队列为空，且剩余容积<span
class="math inline">\(rem\)</span>小于物品<span
class="math inline">\(a[r]\)</span>的cost时，我们跳过这个物品。(操作即为l++,r++)<br />
这样，我们便可以<span
class="math inline">\(O(mn)\)</span>求得答案。<br />
可以预处理出所有的<span
class="math inline">\({l,r}\)</span>(官方题解),不过我就边求边dp了。<br />
code(D1 dp部分):<br />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;ll&gt;<span class="built_in">dp</span>(n + <span class="number">1</span>, inf);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rem = b[i];</span><br><span class="line">    <span class="keyword">for</span> (; r &lt;= n; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rem &gt;= a[r]) &#123;</span><br><span class="line">            rem -= a[r];</span><br><span class="line">            dp[r] = <span class="built_in">min</span>(dp[r], dp[l - <span class="number">1</span>] + m - i);</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                l++;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                rem += a[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dp[n] == inf) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="d2部分">D2部分</h2>
<p>在求解D1的过程中，我们选取的是一定最优的<span
class="math inline">\(\{l,r\}\)</span>对进行转移,但实际上同等优的可以有很多对，而我们想要计数最优方案的话，就要转移所有同等优的(计数所有同等优的)才行。<br />
那么这实际上是一个从左区间到右点的转移，其他题解有用线段树进行区间转移优化的，不过实际上不需要，用双指针仍能做到，而且时间复杂度更优。<br />
前面所说"同等优的转移"很模糊，实际上，"同等优"的左区间即为<span
class="math inline">\(dp\)</span>值相同的区间，那么最优区间是和<span
class="math inline">\(dp[l]\)</span>值相同的区间，这个区间的内的任何点转移到<span
class="math inline">\(r\)</span>的值是一样的，所以我们可以把这个区间的转移变成一次转移，对计数的贡献则是最优区间内所有方案数相加。(想想这是为什么)<br />
设取完<span
class="math inline">\(1-i\)</span>d的最优方案数(最优转移路径数)为<span
class="math inline">\(path[i]\)</span>,最优区间右端点为<span
class="math inline">\(lr - 1\)</span><br />
有状态转移方程： <span class="math display">\[dp[r] = \min(dp[r],dp[l-1]
+ m-i)\]</span><br />
<span class="math display">\[\begin{align*}
    path[r] = \left\{
                \begin{array}{ll}
                  \sum_{i = l}^{lr}path[i] &amp; &amp;dp[r] &gt;
dp[l-1]+m-i\\
                  path[r] +\sum_{i = l}^{lr}path[i] &amp; &amp;dp[r] =
dp[l-1]+m-i\\
                  path[r] &amp; &amp;dp[r] &lt; dp[l-1]+m-i\\
                \end{array}
              \right.
\end{align*}\]</span></p>
<p>所以，我们需要在D1的基础上，对于求出所有<span
class="math inline">\(r\)</span>的最优转移区间<span
class="math inline">\(\{l,lr\}\)</span>,而这个也可以通过双指针做到(注意性质:当<span
class="math inline">\(r\)</span>增大时，<span
class="math inline">\(lr\)</span>同样是单调非降的！)。<br />
具体实现先思考一下会更好，以下是D2部分代码<br />
code: <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n + <span class="number">1</span>), <span class="built_in">b</span>(m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//a.push_back(inf);</span></span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">dp</span>(n + <span class="number">1</span>, inf);</span><br><span class="line">    vector&lt;ll&gt;<span class="built_in">pa</span>(n + <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//path</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    pa[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>, lr = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rem = b[i];</span><br><span class="line">        ll cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt;= n; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lr &lt; l) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;error&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rem &gt;= a[r]) &#123;</span><br><span class="line">                rem -= a[r];</span><br><span class="line">                <span class="keyword">while</span> (dp[lr<span class="number">-1</span>] == dp[l<span class="number">-1</span>] &amp;&amp; lr &lt;= r) &#123;<span class="comment">//lr == r : r-1 -&gt; r </span></span><br><span class="line">                    cnt = (cnt + pa[lr<span class="number">-1</span>]) % mod;</span><br><span class="line">                    lr++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dp[l<span class="number">-1</span>] + m - i &lt; dp[r]) &#123;</span><br><span class="line">                    dp[r] = dp[l<span class="number">-1</span>] + m - i;</span><br><span class="line">                    pa[r] = cnt;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (dp[l<span class="number">-1</span>] + m - i == dp[r]) &#123;</span><br><span class="line">                    pa[r] = (pa[r] + cnt) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                    l++;</span><br><span class="line">                    lr++;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    rem += a[l];</span><br><span class="line">                    cnt = (cnt + mod - pa[l - <span class="number">1</span>]) % mod;;</span><br><span class="line">                    l++;</span><br><span class="line">                    <span class="keyword">while</span> (lr &lt; l) &#123;</span><br><span class="line">                        cnt = (cnt + pa[lr - <span class="number">1</span>]) % mod;</span><br><span class="line">                        lr++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[n] == inf) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; dp[n] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pa[n] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>Contest</category>
      </categories>
  </entry>
  <entry>
    <title>Week4 Training</title>
    <url>/2024/09/28/%E9%A2%98%E8%A7%A3/Codeforces/ProblemSet/week4/</url>
    <content><![CDATA[<h1 id="d.-the-omnipotent-monster-killer"><a
href="https://codeforces.com/contest/1988/problem/D">1988D. The
Omnipotent Monster Killer</a></h1>
<p>由于只有相邻节点之间才有影响，树形dp即可。
权值每次至少减半，故杀死所有怪物的轮数不会超过<span
class="math inline">\(\log n\)</span>轮，相邻节点删去的轮数不同。
在有根树上dp，<span
class="math inline">\(dp[i][j]\)</span>代表在节点i在第j轮删除时，节点<span
class="math inline">\(i\)</span>子树的最小贡献。 状态转移： <span
class="math inline">\(dp[i][j] = \sum_{v\in S_i}\min(dp[v][k]),k \neq
j\)</span></p>
<h1 id="e.-level-up"><a
href="https://codeforces.com/contest/1997/problem/E">1977E. Level
Up</a></h1>
<p>线段树+二分 第一次用自己写的线段树板子，爽捏。
对于每个位置，大于最小答案的每个k的取值都可以满足要求，故可以二分答案。check是计算答案为k时，前面的最小答案在1-k区间内的个数(即获得的exp)，然后按照题意判断即可。
<strong>一定要注意整型溢出的问题！！！</strong>
(因为在check的时候，使用了mid*a[i]与exp比较大小，而mid*a[i]是可能溢出的。)
(当然，可以直接比exp/mid 和a[i]) 核心代码： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SegTree&lt;<span class="type">int</span>&gt; <span class="title">t</span><span class="params">(n)</span></span>;</span><br><span class="line">t.<span class="built_in">build</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="type">int</span> ng = <span class="number">0</span>, ok = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ok - ng &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (ng + ok) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> exp = t.<span class="built_in">qry</span>(<span class="number">1</span>, mid);</span><br><span class="line">        <span class="keyword">if</span> (exp / mid &gt;= a[i]) &#123;</span><br><span class="line">            ng = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ok = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[i] = ok;</span><br><span class="line">    t.<span class="built_in">upd</span>(ok, ok, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>ProblemSet</category>
      </categories>
  </entry>
  <entry>
    <title>Week3 Training</title>
    <url>/2024/09/21/%E9%A2%98%E8%A7%A3/Codeforces/ProblemSet/week3/</url>
    <content><![CDATA[<h1 id="h.-sakurakos-test"><a
href="https://codeforces.com/contest/2008/problem/H">2008H. Sakurako's
Test</a></h1>
<p>关键是前缀和和二分 以及对边界做一点特殊处理防止前缀数组越界
二分有说法的，要通过二分找到右边界(和中位数定义有关)
或许还可以改改代码，感觉自己写的有点怪</p>
<h1 id="g.-ultra-meow"><a
href="https://codeforces.com/contest/1992/problem/G">1992G.
Ultra-Meow</a></h1>
<p>看清这题的数据范围，对<span class="math inline">\(\sum
n^2\)</span>做了限制，所以单测<span
class="math inline">\(O(n^2)\)</span>的复杂度是没有问题的，不需要预处理所有答案然后<span
class="math inline">\(O(1)\)</span>查询。 做法是对于每个可能的<span
class="math inline">\(k = mex(S)\)</span>,对<span
class="math inline">\(k\)</span>分讨，算出每种k的贡献次数即可，复杂度<span
class="math inline">\(O(n^2)\)</span>。 需要一点点组合。
组合的板子在对负数的处理上好像有不兼容的的地方？
<strong>回头看看，改一下板子，这句话还在这里就表示没有修改板子以及搞清楚原因</strong></p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>ProblemSet</category>
      </categories>
  </entry>
  <entry>
    <title>Week6 Training</title>
    <url>/2024/10/22/%E9%A2%98%E8%A7%A3/Codeforces/ProblemSet/week6/</url>
    <content><![CDATA[<h1 id="g.-milky-days"><a
href="https://codeforces.com/problemset/problem/2014/G">2014 G. Milky
Days</a></h1>
<p>实际上是一道模拟题，
我们定义关键天为牛奶数目可能会非因为喝掉而改变的那天。
利用一个deque去处理关键天时能否供给牛奶即可 则关键天为 <span
class="math inline">\(\min(最近牛奶过期天，下一个获得牛奶的天)\)</span>
我们一边求解答案一边算下一个关键天是哪个 假设关键天序列为<span
class="math inline">\(a_0,a_1,a_2,a_3...\)</span> 初始化<span
class="math inline">\(a_0 = 1\)</span>
由于一个关键天到下一个关键天前,牛奶只会被喝掉而不会过期、增加，那么我们就可以<span
class="math inline">\(O(1)\)</span>处理掉这一段了。 于是我们的算法是：
1. 算出下一个关键天<span class="math inline">\(a_{i+1}\)</span> 2.
处理区间<span class="math inline">\([a_i,a_{i+1}-1]\)</span> 3.
把关键天对milk数目的影响加入进去</p>
<p>显然，我们如上初始化之后，只需要一个简单的技巧：补一个足够大的关键天并让它对牛奶的影响为0，最后即可得到答案。</p>
<p>我们对每一段的处理是<span
class="math inline">\(O(1)\)</span>的，而总的关键天数不会超过<span
class="math inline">\(2n\)</span>(每一批的牛奶都过期了)，那么总的时间复杂度为<span
class="math inline">\(O(n)\)</span></p>
<details>
<summary>
Code:
</summary>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    deque&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;dq;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">d</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; d[i] &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    d.<span class="built_in">push_back</span>(<span class="number">1145141919</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    ll mks = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> nxt;</span><br><span class="line">        <span class="keyword">if</span> (dq.<span class="built_in">empty</span>())</span><br><span class="line">            nxt = d[p];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nxt = <span class="built_in">min</span>(dq.<span class="built_in">front</span>().second + k, d[p]);</span><br><span class="line"></span><br><span class="line">        ll need = (nxt - t) * (ll)m;</span><br><span class="line">        <span class="keyword">if</span> (mks &gt;= need) &#123;</span><br><span class="line">            mks -= need;</span><br><span class="line">            ans += nxt - t;</span><br><span class="line">            <span class="keyword">while</span> (need &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (need &gt;= dq.<span class="built_in">back</span>().first) &#123;</span><br><span class="line">                    need -= dq.<span class="built_in">back</span>().first;</span><br><span class="line">                    dq.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dq.<span class="built_in">back</span>().first -= need;</span><br><span class="line">                    need = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += mks / m;</span><br><span class="line">            mks = <span class="number">0</span>;</span><br><span class="line">            dq.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nxt == d[p]) &#123;</span><br><span class="line">            dq.<span class="built_in">push_back</span>(&#123; a[p],d[p] &#125;);</span><br><span class="line">            mks += a[p];</span><br><span class="line">            p++;</span><br><span class="line">            t = nxt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!dq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                mks -= dq.<span class="built_in">front</span>().first;</span><br><span class="line">                dq.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            t = nxt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<h1 id="h.-robin-hood-archery"><a
href="https://codeforces.com/problemset/problem/2014/H">2014 H. Robin
Hood Archery</a></h1>
<p>通过简单的观察，只有这个区间的所有数都出现偶数次才可能平手，所以我们自然联想到用异或hash来处理：
由异或的性质，每个数的偶数次异或和结果为0。
于是一个区间的数都出现偶数次的必要条件于这个区间的随机异或和为0(充要前提是不发生hash碰撞)。
于是我们给每个数随机一个mt19937_64作为值，然后处理一下异或前缀和方便<span
class="math inline">\(O(1)\)</span>查询每个区间
<strong>(每个数异或逆元是它本身，即很好找到异或逆元，这是我们从前缀和得到区间和的必要条件，而像<span
class="math inline">\(\gcd\)</span>等运算根本没有逆元导致没办法处理前缀和之后就<span
class="math inline">\(O(1)\)</span>求解区间和)</strong>
之后就很简单了，如果异或和为0即为合法区间。</p>
<details>
<summary>
Code:
</summary>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">mt19937_64 <span class="title">rnd</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">    map&lt;<span class="type">int</span>, ll&gt;mp, status;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">hs</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (mp[a[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            mp[a[i]] = <span class="built_in">rnd</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        hs[i] = mp[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        hs[i] ^= hs[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> ((hs[r] ^ hs[l - <span class="number">1</span>]) == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
<p>这题好像也有莫队的做法，想想也可行(如果实现比较好不被卡常)</p>
<h1 id="e.-compatible-numbers"><a
href="https://codeforces.com/problemset/problem/165/E">165 E. Compatible
Numbers</a></h1>
<p>从某道最近的题来的S 一道sos dp典题，但是写的时候过于犯病</p>
<p>题意大概是给定一个非空多重集合，<span class="math inline">\(a_i \ge
1\)</span>。定义compatible(相容)<span
class="math inline">\(a\)</span>相容<span
class="math inline">\(b\)</span>为 <span class="math inline">\(a \&amp;
b =
0\)</span>,对集合中每个元素，求集合中与它相容的元素(不能是它本身或者相等的元素)</p>
<p>因为知道是sosdp，所以很快有思路： 每个元素<span
class="math inline">\(a_i\)</span>按位取反<span
class="math inline">\(\sim a_i\)</span>的子掩码都与<span
class="math inline">\(a_i\)</span>相容，我们直接用<span
class="math inline">\(a_i\)</span>的下标<span
class="math inline">\(i\)</span>初始化<span
class="math inline">\(dp[\sim
a_i]\)</span>，其他初始值为0,然后跑一遍sosdp即可。设置a[0] =
-1即可让<span class="math inline">\(ans[i] = a[dp[a[i]]]\)</span>;</p>
<p>sosdp的dp方法： 对每个位来一轮(假设为第<span
class="math inline">\(i\)</span>位)，遍历整个状态空间，如果该位置<span
class="math inline">\(p\)</span>这一位为1(<span
class="math inline">\((p&gt;&gt;i) \&amp; 1 == 1\)</span>)，则更新 <span
class="math display">\[dp[p \oplus 1&lt;&lt;i] = \max(dp[p],dp[p \oplus
1&lt;&lt;i])\]</span> 取max是为了防止被-1覆盖。</p>
<details>
<summary>
Code:
</summary>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m = <span class="number">22</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> p = <span class="number">1</span> &lt;&lt; m;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> inf = (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">msk</span>(p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        msk[(~a[i]) &amp; inf] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((j &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                msk[j ^ (<span class="number">1</span> &lt;&lt; i)] = <span class="built_in">max</span>(msk[j], msk[j ^ (<span class="number">1</span> &lt;&lt; i)]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msk[a[i]])</span><br><span class="line">            cout &lt;&lt; a[msk[a[i]]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt;&gt;</p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
        <category>ProblemSet</category>
      </categories>
  </entry>
  <entry>
    <title>ABC378 每日一寄1st</title>
    <url>/2024/11/09/%E9%A2%98%E8%A7%A3/Atcoder/EverydayG/ABC378G/</url>
    <content><![CDATA[<h1 id="abc378-g---everlasting-lids-1st"><a
href="https://atcoder.jp/contests/abc378/tasks/abc378_g">ABC378 G -
Everlasting LIDS (1st)</a></h1>
<p>(是每日一寄的开始，虽然好像做不到每日一寄啦)</p>
<p><em>相关算法：序理论，杨表，钩长公式，dp</em></p>
<h2 id="part-1.题目概述">Part 1.题目概述</h2>
<p>题意很简单，给定限定<span
class="math inline">\(A,B\)</span>，要求构造出长为<span
class="math inline">\(A\cdot B-1\)</span>的且具有以下性质的排列<span
class="math inline">\(P\)</span>：<br />
1. 最长上升子序列(LIS)为<span class="math inline">\(A\)</span>.<br />
2. 最长下降子序列(LDS)为<span class="math inline">\(B\)</span>.<br />
3. 存在一个整数<span class="math inline">\(n\)</span>使得在<span
class="math inline">\(P\)</span>的末尾添加<span
class="math inline">\(n+0.5\)</span>不会改变最长递增子序列和最长递减子序列的长度</p>
<p>求可行的构造方案数，结果输出方案数模素数<span
class="math inline">\(M\)</span>。</p>
<h2 id="part-2.杨表">Part 2.杨表</h2>
<p>解决这题需要一些前置知识：杨表<br />
英式画法的杨表由有限个相邻的方格排列而成，其中，各横行的左边对齐，长度从上到下递增。<br />
<img src="\image\article_pics\at_evG\378\Completely-Young-diagram.png"
alt="英式杨表" /> 标准杨表：在杨表的
n个方格中任意填入1到n中的相异正整数，各行和各列中的数字皆严格递增。<br />
<img src="\image\article_pics\at_evG\378\young-diagram-1.png"
alt="标准杨表" />
显然，杨表代表着一种二维表示的偏序。而这种拓扑序可以与一个排列的LIS和LDS相关联。<br />
引入RSK算法(杨表的插入算法)：<br />
令<span class="math inline">\(S\)</span>是一个杨表，定义<span
class="math inline">\(S \leftarrow x\)</span>表示将<span
class="math inline">\(x\)</span>从第一行插入杨表中，具体如下：(引自oiwiki)<br />
1. 在当前行中找到最小的比<span
class="math inline">\(x\)</span>大的数<span
class="math inline">\(y\)</span>。<br />
2. 如果找到了，用<span class="math inline">\(x\)</span>去替换<span
class="math inline">\(y\)</span>，移到下一行，令<span
class="math inline">\(x \leftarrow y\)</span>重复操作1。<br />
3. 如果找不到，就把<span
class="math inline">\(x\)</span>放在该行末尾并退出。记<span
class="math inline">\(x\)</span>在第 <span
class="math inline">\(s\)</span>行第<span
class="math inline">\(t\)</span>列，<span class="math inline">\((s,
t)\)</span> 必定是一个边角。一个格子 <span class="math inline">\((s,
t)\)</span> 是边角当且仅当<span class="math inline">\((s + 1,
t)\)</span>和<span class="math inline">\((s, t +
1)\)</span>都不存在格子。</p>
<p>对于一个排列<span class="math inline">\(P =
\{p_1,p_2,...p_n\}\)</span>,我们构造一个杨表<br />
<span class="math display">\[S = p_1 \leftarrow p_2 \leftarrow ...
\leftarrow p_n\]</span> 此外，我们定义一个记录表<span
class="math inline">\(Q\)</span>，<span
class="math inline">\(Q_{s,t}\)</span>为插入<span
class="math inline">\(S\)</span>位置<span
class="math inline">\((s,t)\)</span>时元素<span
class="math inline">\(p_i\)</span>的下标<span
class="math inline">\(i\)</span>。<br />
可以预见: 1. <span
class="math inline">\(Q\)</span>中元素也满足杨表的偏序关系(构造时是在已有格子的下方或右方插入更大的元素),故<span
class="math inline">\(Q\)</span>也是一个杨表。 2. 且<span
class="math inline">\(S\)</span>和<span
class="math inline">\(Q\)</span>具有相同的形状(这是易从定义推出的)。</p>
<p>于是，通过一个排列<span
class="math inline">\(P\)</span>，我们生成了一对杨表<span
class="math inline">\(\{S,Q\}\)</span>。 将<span
class="math inline">\(n\)</span>元排列的集合记作<span
class="math inline">\(\mathbb{P}\)</span>,<span
class="math inline">\(n\)</span>元杨表的集合记作<span
class="math inline">\(\mathbb{S}\)</span>,具有相同形状的杨表集合记作<span
class="math inline">\(\mathbb{S_{\lambda_i}}\)</span>,其中<span
class="math inline">\(\lambda\)</span>是整数<span
class="math inline">\(n\)</span>的一个分拆，这唯一对应了杨图的一个形状。
用<span
class="math inline">\(\pi_\lambda\)</span>表示这样形状的一个杨表。</p>
<p>以下不加证明给出一些结论,符号与上文意义保持一致:<br />
1. <span class="math inline">\(P\)</span>的LIS等于<span
class="math inline">\(S\)</span>的第一行元素个数，LDS等于<span
class="math inline">\(S\)</span>的第一列元素个数。 2. <span
class="math inline">\(f : \mathbb{P} \rightarrow \sum_{all \lambda_i}
\mathbb{S_{\lambda_i}} \times
\mathbb{S_{\lambda_i}}\)</span>是双射。即从使用上文所属的RSK插入算法，不同排列得到的杨表对是不同的(单射)。更为重要的是这还是一个满射，也就是说可以得到所有的杨表对。
3. 对于对于杨表中的一个方格<span
class="math inline">\(v\)</span>，定义其勾长<span
class="math inline">\(\mathrm{hook}(v)\)</span>等于同行右边的方格数加上同列上面的方格数，再加<span
class="math inline">\(1\)</span>（即方格本身）。如果用<span
class="math inline">\(dim_{\lambda}\)</span>表示这样的方法个数，方法个数就等于<span
class="math inline">\(n!\)</span>除以所有方格的勾长的乘积。
有钩长公式:<span class="math display">\[\dim \pi _{\lambda} =
\frac{n!}{\prod_{x \in Y(\lambda)} \mathrm{hook}(x)}\]</span></p>
<p>现在，我们有了足够的理论基础来解决本题。</p>
<h2 id="part-3.分析">Part 3.分析</h2>
<p>由Part 2中的理论，长为<span class="math inline">\(A\cdot B -
1\)</span>的排列对应的杨表形状是唯一的，即一个<span
class="math inline">\(A \times
B\)</span>的矩形去掉右下角一块。而条件3要求我们在<span
class="math inline">\(P\)</span>的末尾插入元素<span
class="math inline">\(n + 0.5\)</span>
后LIS和LDS不变，那么对应的杨图应为<span class="math inline">\(A \times
B\)</span>的矩形了。<br />
考虑前面所述的RSK插入算法，对原杨表<span
class="math inline">\(\pi\)</span>插入一个元素后刚好到达右下角，那么只能是每次替换掉该行最后一个元素，然后向下传递。我们选取的元素应该为介于<span
class="math inline">\(\pi_{1,b-1}\)</span>和<span
class="math inline">\(\pi_{1,b}\)</span>，即<span
class="math inline">\(\pi_{1,b-1}&lt;
n+0.5&lt;\pi_{1,b}\)</span>。然后，这个数替换掉<span
class="math inline">\(\pi_{1,b}\)</span>,<span
class="math inline">\(\pi_{1,b}\)</span>接着向下传递，仍然重复这样的替换，那么条件是相似的。由于杨表的性质，已经有了<span
class="math inline">\(\pi_{i,b}&lt;\pi_{i+1,b}\)</span>,故我们只需要求<span
class="math inline">\(\pi_{i+1,b-1}&lt;\pi_{i,b}\)</span>,便可以保持这种传递一直进行到最后一行。<br />
而构造出这样特定的杨表后，我们有<span class="math inline">\(\dim \pi
_{\lambda}\)</span>种记录表将其映射成一个合法的排列<span
class="math inline">\(P\)</span>(考虑我们前面所述的双射和映上性)。所以我们求解这道题，只需得到满足条件杨表的数量和<span
class="math inline">\(\dim \pi
_{\lambda}\)</span>，而后者只需要使用钩长公式即可。</p>
<h2 id="part-4.实现dp">Part 4.实现(DP)</h2>
<p>我们考虑使用dp来求解合法的杨图数量。<br />
模拟杨表的填入，我们顺序选取元素<span class="math inline">\(1 \sim
A\cdot B-1\)</span>填入，以减少不必要的check。
考虑杨表的二维偏序性，我们不是在二维的矩阵上去枚举填入数字的位置，而是选择一维顺序填入，另一维枚举填入位置。(毕竟顺序选取元素时跨越式的填入是一定不符合杨表的限制的)<br />
为了方便检查分析的来的条件，我们顺序填入行，并枚举填入的列号。用一个vector
<span
class="math inline">\(v\)</span>来表示每列填入了多少行，设计状态<span
class="math inline">\(dp[v]\)</span>表示填入状态为<span
class="math inline">\(v\)</span>的方案数。我们顺序选取元素<span
class="math inline">\(1 \sim A\cdot
B-1\)</span>填入，对于每个元素，我们枚举前一个元素填入后的所有状态，对每个状态枚举填入某列是否合法，若合法则从<span
class="math inline">\(v\)</span>转移到合法状态<span
class="math inline">\(u\)</span>。状态转移方程： <span
class="math display">\[dp[u] += dp[v]\]</span> 对<span
class="math inline">\(v\)</span>填入第<span
class="math inline">\(i\)</span>列合法所需的条件: 1. <span
class="math inline">\(v[i] \neq a \bigwedge (i = 0 \bigvee v[i] &lt; v[i
- 1])\)</span> 2. <span class="math inline">\(i \neq b - 1 \bigvee v[i]
&lt; v[i - 1] - 1\)</span></p>
<p>我们用一个map来滚动记录状态并且dp。</p>
<p>code:(用了jls的模数板子，并且借鉴了一下别的大佬的思路)
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, m;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; m;</span><br><span class="line">    MInt&lt;<span class="number">0</span>&gt;::Mod = m;</span><br><span class="line">    <span class="keyword">using</span> Z = MInt&lt;<span class="number">0</span>&gt;;</span><br><span class="line"></span><br><span class="line">    Z ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; a * b - <span class="number">1</span>; x++) &#123;</span><br><span class="line">        <span class="type">int</span> i = x / b, j = x % b;</span><br><span class="line">        ans *= (x<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> q = (a + b - i - j - <span class="number">1</span> - (i == a - <span class="number">1</span>) - (j == b - <span class="number">1</span>));</span><br><span class="line">        ans /= q;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    map&lt;vector&lt;<span class="type">int</span>&gt;, Z&gt;dp;</span><br><span class="line">    dp[<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(b,<span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a * b - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        map&lt;vector&lt;<span class="type">int</span>&gt;, Z&gt;ndp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[v, c] : dp) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[i] != a &amp;&amp; (i == <span class="number">0</span> || v[i] &lt; v[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i != b - <span class="number">1</span> || v[i] &lt; v[i - <span class="number">1</span>] - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> u = v;</span><br><span class="line">                        u[i]++;</span><br><span class="line">                        ndp[u] += c;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp = <span class="built_in">move</span>(ndp);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">getans</span>(b, a);</span><br><span class="line">    getans[b - <span class="number">1</span>]--;</span><br><span class="line">    ans *= dp[getans];</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>模数板子： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, i64 b)</span> </span>&#123;</span><br><span class="line">    T res&#123; <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (; b; b /= <span class="number">2</span>, a *= a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> i64 <span class="title">mul</span><span class="params">(i64 a, i64 b, i64 p)</span> </span>&#123;</span><br><span class="line">    i64 res = a * b - <span class="built_in">i64</span>(<span class="number">1.L</span> * a * b / p) * p;</span><br><span class="line">    res %= p;</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res += p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;i64 P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line">    i64 x;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x&#123;</span> <span class="number">0</span> &#125; &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(i64 x)</span> : x&#123;</span> <span class="built_in">norm</span>(x % <span class="built_in">getMod</span>()) &#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> i64 Mod;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> i64 <span class="title">getMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (P &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">void</span> <span class="title">setMod</span><span class="params">(i64 Mod_)</span> </span>&#123;</span><br><span class="line">        Mod = Mod_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">norm</span><span class="params">(i64 x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x += <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="built_in">getMod</span>()) &#123;</span><br><span class="line">            x -= <span class="built_in">getMod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> i64 <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        MInt res;</span><br><span class="line">        res.x = <span class="built_in">norm</span>(<span class="built_in">getMod</span>() - x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, <span class="built_in">getMod</span>() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>*=(MInt rhs)&amp; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getMod</span>() &lt; (<span class="number">1ULL</span> &lt;&lt; <span class="number">31</span>)) &#123;</span><br><span class="line">            x = x * rhs.x % <span class="built_in">int</span>(<span class="built_in">getMod</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="built_in">mul</span>(x, rhs.x, <span class="built_in">getMod</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>+=(MInt rhs)&amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>-=(MInt rhs)&amp; &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x - rhs.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>/=(MInt rhs)&amp; &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= rhs.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>*(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res *= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>+(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res += rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>-(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res -= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> MInt <span class="keyword">operator</span>/(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        MInt res = lhs;</span><br><span class="line">        res /= rhs;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::istream&amp; <span class="keyword">operator</span>&gt;&gt;(std::istream&amp; is, MInt&amp; a) &#123;</span><br><span class="line">        i64 v;</span><br><span class="line">        is &gt;&gt; v;</span><br><span class="line">        a = <span class="built_in">MInt</span>(v);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> MInt&amp; a) &#123;</span><br><span class="line">        <span class="keyword">return</span> os &lt;&lt; a.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() == rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() != rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(MInt lhs, MInt rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">val</span>() &lt; rhs.<span class="built_in">val</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">i64 MInt&lt;<span class="number">0</span>&gt;::Mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//constexpr int P = 1000000007;</span></span><br><span class="line"><span class="comment">//using Z = MInt&lt;P&gt;;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Atcoder</category>
        <category>EverydayG</category>
      </categories>
  </entry>
</search>
